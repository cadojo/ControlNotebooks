var documenterSearchIndex = {"docs":
[{"location":"Chapter 1: Introduction/#Introduction","page":"Chapter 1: Introduction","title":"Introduction","text":"","category":"section"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"Why controls?","category":"page"},{"location":"Chapter 1: Introduction/#Overview","page":"Chapter 1: Introduction","title":"Overview","text":"","category":"section"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"Control theory is hard! Lots of analysis is nuanced, and it's pretty easy to fall into incorrect assumptions and incomplete understanding. That's where this refresher comes in. We'll cover basic definitions through multi-input multi-output linear analysis, and everything in between. ","category":"page"},{"location":"Chapter 1: Introduction/#What-is-Control-Theory?","page":"Chapter 1: Introduction","title":"What is Control Theory?","text":"","category":"section"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"Our world is filled with human-made, and natural systems. We can model each system with equations of motion. These equations describe how each system's state changes! A quick definition for state is described below. We often want to control the state in some way. Think about the populations of predators and prey in an ecosystem, inflation rates in an economy, the orientation of a rocket, the speed of a car, etc.","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"note: Definitions\nState – a set of values that completely describe a system.","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"Over the years, smart people have developed a field known as controls. Control theory is a broad term which includes...","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"the math used to describe systems you'd like to control\nthe analysis tools you use to see how well your system behaves\nthe strategies for developing controllers\nmore stuff like this","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"We'll need a few more definitions before we really get started. ","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"note: Definitions\nPlant – the system you'd like to control (a car, a rocket, etc.)\nInput - parameter values in your equations which you can change to influence your system's state (often a force or a device which produces a force for physical systems)\nModel - the equations you've been given, or you've chosen which represent your system (model is synonymous with equations of motion)\nDynamics - math (equations) which descibe how a system's state changes due to external forces\nControl Law - an equation which describes how you change your input values (this is set by you, the controls engineer!)\nPerformance – how well your controller controls your system (how fast does the system move towards your desired state values, is your controller robust to perturbations and noise, etc.)","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"We'll walk through common control theory concepts and strategies in this note-set. It helps to have a concrete example for a system to control, so let's use one! NASA has developed a model aircraft for research, and university researchers produced an approximated model to describe this aircraft. We will use this model throughout these notes. By working through these notes, you'll be learning to control (a very rough model of) an airplane!","category":"page"},{"location":"Chapter 1: Introduction/#What-System-are-we-Using?","page":"Chapter 1: Introduction","title":"What System are we Using?","text":"","category":"section"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"NASA has developed a sub-scale model aircraft (think RC model plane) for flight controls research. This model is called the Generic Transport Model: GTM for short! You can learn more about this in an overview page, or by checking out the following video. ","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"University researchers (Chakraborty et al) used curve-fitting strategies to approximate the equations which describe airplane flight as low-order polynomials. Polynomial approximations for systems are valuable because computers can compute polynomials quickly! ","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"This approximate (read, ROUGH) model for GTM flight dynamics has been ported to Julia as the PolynomialGTM package. PolynomialGTM only exports one variable: GTM, a ModelingToolkit.ODESystem instance which includes the polynomial-approximated equations of motion for NASA's GTM. ","category":"page"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"<iframe width=\"560\" src=\"https://www.youtube.com/embed/_3JSRvaTRIQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"page"},{"location":"Chapter 1: Introduction/#What's-Next?","page":"Chapter 1: Introduction","title":"What's Next?","text":"","category":"section"},{"location":"Chapter 1: Introduction/","page":"Chapter 1: Introduction","title":"Chapter 1: Introduction","text":"Next, we'll look at nonlinear dynamics, and what these models look like.","category":"page"},{"location":"Chapter 4: Linear Dynamics/#Linear-Dynamics","page":"Chapter 4: Linear Dynamics","title":"Linear Dynamics","text":"","category":"section"},{"location":"Chapter 4: Linear Dynamics/","page":"Chapter 4: Linear Dynamics","title":"Chapter 4: Linear Dynamics","text":"What's a state-space model?","category":"page"},{"location":"Chapter 4: Linear Dynamics/","page":"Chapter 4: Linear Dynamics","title":"Chapter 4: Linear Dynamics","text":"<mark>TODO!</mark>","category":"page"},{"location":"Chapter 5: Equilibrium Points/#Equilibrium-Points","page":"Chapter 5: Equilibrium Points","title":"Equilibrium Points","text":"","category":"section"},{"location":"Chapter 5: Equilibrium Points/","page":"Chapter 5: Equilibrium Points","title":"Chapter 5: Equilibrium Points","text":"When your system stops changing!","category":"page"},{"location":"Chapter 5: Equilibrium Points/","page":"Chapter 5: Equilibrium Points","title":"Chapter 5: Equilibrium Points","text":"<mark>TODO!</mark>","category":"page"},{"location":"Chapter 2: General Dynamics/#Dynamics-and-Equations-of-Motion","page":"Chapter 2: General Dynamics","title":"Dynamics and Equations of Motion","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"How stuff moves!","category":"page"},{"location":"Chapter 2: General Dynamics/#Overview","page":"Chapter 2: General Dynamics","title":"Overview","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"Our end goal as controls engineers is to affect a system in some desired way.  To do this, we'll need a mathematical description of our system. This mathematical  description is known as a model.  There's a famous quote about mathematical models: \"all models are wrong, but some are useful\". ","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"This is really important. We are always approximating our system by describing it with a model. The question we need to ask is \"is our approximate description of our system (our model) good enough?\"","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"note: Definitions\nModel - a mathematical description of a system","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"But what does this model look like? To answer this question, let's  first discuss system dynamics, and equations of motion.","category":"page"},{"location":"Chapter 2: General Dynamics/#Dynamics","page":"Chapter 2: General Dynamics","title":"Dynamics","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"If we want to affect a system, then by definition, the system should be affect-able (is that a word?) by external forces. These \"forces\" don't necessarily need to be physical forces: consider the affect  of introducing new predators in an ecosystem with the goal of affecting predator-prey populations.","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"So we have a mathematical description, and we know we'll need some changing parameter to affect the mathematical description. Sounds like we need equations! The equations that govern  our system are often called equations of motion. Any system that changes due to  some external \"force\" is known as a dynamical system by definition. ","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"The first step to any controls problem is identifying the dynamics; this usually  means defining the equations of motion for our system. A set of equations of motion which describe our dynamical system is our model. ","category":"page"},{"location":"Chapter 2: General Dynamics/#Example","page":"Chapter 2: General Dynamics","title":"Example","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"A really common system in engineering is known as the spring-mass-damper.  We can roughly describe this system as a block on a table, which  is connected to a spring. We can force (a.k.a. affect) this system by pulling on  the block to extend or compress the spring. ","category":"page"},{"location":"Chapter 2: General Dynamics/#Model-Construction","page":"Chapter 2: General Dynamics","title":"Model Construction","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"Let's figure out our equations of motion. The following question is usually a useful  starting point: \"what are the forces on our system?\" We know we'll have one external  force: us pulling or pushing on the block! Let's call this external force f_e.  We'll also have a force due to the spring, and a force due to the friction  between the block and the table. The force due to the spring will be proportional to the position of the block with respect to the spring's neutral position: let's  call the spring constant k. The force due to friction will be proportional  to the velocity of the block (let's forget about static friction for now): let's call the coefficient of friction d.","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"With all of the forces identified, we can start constructing the eqautions of motion for this system. If we call our block's position x, then the acceleration ddotx will be equal to the sum of our external force f_e, the spring force k x, and the force due to friction d dotx. Summing these forces produces the following (common) spring-mass-damper equation, where m is the mass of the block. ","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"f_e = m ddotx + d dotx + k x","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"We have our model! This is a second-order differential equation. It helps to divide  all variables into two groups: parameters, and states. States describe the system  at some point in time. In this case, state variables answer the following questions: \"where is the block, what is the velocity of the block, and what is the acceleration of the block?\" One set of valid state variables for this system is x and dotx;  we don't need to include ddotx in our list of state variables because we can  calculate ddotx from x and dotx. ","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"note: Note\nWe say \"one set of state variables\" because there may (and nearly always are) other valid state representations that could completely describe this system! State variables are not unique.","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"If we leave states as symbolic, and then look to the equation(s) of motion of a system, the parameters describe a specific instance of a system. Put another way, no matter what values f_e, d, and k take, this equation of motion is identifiable as a spring-mass-damper. For this reason, we can specify f_e, d, and k as parameters. We can assume a unit mass for the block for now.","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"note: Note\nThe parameter f_e is our control parameter in this example, because we can change f_e to affect our system. For now, let's not differentiate between control parameters and  non-control parameters. ","category":"page"},{"location":"Chapter 2: General Dynamics/#Coding-our-Model","page":"Chapter 2: General Dynamics","title":"Coding our Model","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"We can simulate these dynamics with Julia's DifferentialEquations package. If you're  familiar with MATLAB, DifferentialEquations provides numerical integration solvers  that are similar to MATLAB's ode45 (and similar) solvers. We can use the ModelingToolkit package to conveniently put our model to code, and interface with DifferentialEquations for simulation.","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"using ModelingToolkit\n\n@parameters t fₑ d k\n@variables x(t) ẋ(t)\nδ = Differential(t)\n\neqs = [\n    δ(x) ~ ẋ,\n    δ(ẋ)~ - d*ẋ - k*x + fₑ\n]\n\nmodel = ODESystem(eqs, t, [x, ẋ], [fₑ, d, k]; name = :HarmonicOscillator)\nnothing # hide","category":"page"},{"location":"Chapter 2: General Dynamics/#Simulating-our-Model","page":"Chapter 2: General Dynamics","title":"Simulating our Model","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"With model defined above, we can use DifferentialEquations to simulate our system. Of course, to do this we'll need to specify numerical values for our parameters, and initial conditions (the simulation starting point) for our state variables. The code below specifies some arbitrary initial conditions and constant parameter values, and simulates the resulting dynamics. ","category":"page"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"using Plots\nusing DifferentialEquations\n\nproblem = let x₀ = 0.1, ẋ₀ = 0.0, dₙ = 0.5, kₙ = 0.9, fₙ = 1.0, Δt = 30.0\n    ODEProblem(\n        model,\n        [x => x₀, ẋ => ẋ₀],\n        (0.0, Δt),\n        [d => dₙ, k => kₙ, fₑ => fₙ]\n    )\nend\n\nsolutions = solve(problem, Tsit5(); reltol = 1e-12, abstol = 1e-12)\nplot(solutions; linewidth = 2, dpi = 130, title = \"Spring Mass Damper Simulation\")","category":"page"},{"location":"Chapter 2: General Dynamics/#What's-Next?","page":"Chapter 2: General Dynamics","title":"What's Next?","text":"","category":"section"},{"location":"Chapter 2: General Dynamics/","page":"Chapter 2: General Dynamics","title":"Chapter 2: General Dynamics","text":"Okay, we just showed some applied modeling and simulation for spring-mass-damper dynamics. What about the primary system we're analyzing throughout these notes, NASA's Generic Transport Model (GTM)? The polynomial-approximated equations we'll be using are super long. Still want to  see them? Be afraid! Continue on to Chapter 2!","category":"page"},{"location":"Chapter 3: Flight Dynamics/#GTM-Flight-Dynamics","page":"Chapter 3: Flight Dynamics","title":"GTM Flight Dynamics","text":"","category":"section"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"How planes move!","category":"page"},{"location":"Chapter 3: Flight Dynamics/#Overview","page":"Chapter 3: Flight Dynamics","title":"Overview","text":"","category":"section"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"We'll be analysing a polynomial approximation of  GTM dynamics throughout these notes, so it's worth spending some time  covering aircraft dynamics generically. ","category":"page"},{"location":"Chapter 3: Flight Dynamics/#Generic-Flight-Dynamics","page":"Chapter 3: Flight Dynamics","title":"Generic Flight Dynamics","text":"","category":"section"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"There are many dynamical modes that affect airplanes throughout flight.  You can think of modes as oscillations in-time for some subset of a system's  state space. Aircraft have dynamical modes which produce aircraft oscillations above and below the aircraft's longitudinal axis (the line pointing forward from the nose) – these are known as longitudinal modes.  Lateral modes (modes which rotate the aircraft about its longitudinally and  vertically oriented axes) also affect flight dynamics. General information about dynamical modes common to flight dynamics is available  on Wikipedia. ","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"Only analyzing one set of dynamical modes (only some self-contained equations of motion) is common practice in early controls analysis. For simplicity, we'll do the same here  and throughout these notes! Just note that, at the end of the day, you of course need to test your system's performance relative to all modeled dynamics.","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"The equations of motion for the longitudinal flight dynamics  associated with any generic aircraft are shown below. These  are common equations, which are taught in many undergraduate  aerospace engineering programs. ","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"    x = beginbmatrix V  alpha  q  theta endbmatrix  \n    u = beginbmatrix delta_elev  delta_th endbmatrix","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"f(x) triangleq dotx = beginbmatrix\n    dotV  dotalpha  dotq  dottheta\nendbmatrix = beginbmatrix\n    frac1mleft(-D - m g sin(theta - alpha) + T_x cosalpha + T_z sinalpha right) \n    frac1m Vleft(-L + m g cos(theta - alpha) - T_x sinalpha + T_z cosalpharight) + q \n    fracM + T_mIyy \n    q\nendbmatrix","category":"page"},{"location":"Chapter 3: Flight Dynamics/#Approximated-GTM-Dynamics","page":"Chapter 3: Flight Dynamics","title":"Approximated GTM Dynamics","text":"","category":"section"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"NASA's Generic Transport Model (GTM) is a radio-controlled model plane, which is a scaled-down version of a generic passenger plane (think, one of the  big jets you may fly on when you travel). This model is used for  flight controls research. According to Chakraborty et al,  aerodynamic coefficients are used by NASA to describe  atmospheric lift, drag, and aerodynamic moments. These  tables are not publicly available. Still, Chakraborty et al published publicly available polynomial approximations of longitudinal GTM flight dynamics near select  trim conditions. We'll cover trim conditions (also known as equilibrium points) in future chapters. For now, its enough to understand that the polynomial approximation they made is only accurate near select flight conditions. Of course, even near these  select flight conditions, the approximation introduces error. Chakraborty et al tracked the magnitude of these errors, but we'll just (falsely) treat this polynomial approximation as fact throughout these notes. ","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"If you're interested in reading more about the methodology behind these polynomial  approximations, read Chakraborty et al's paper, and check out a Python implementation and associated paper  which was completed as part of a University of Maryland aerospace engineering course project.  The polynomial approximations, as derived and published by Chakraborty et al, are shown below.  I told you to be afraid!","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"note: Note\nThese polynomial approximations were also implemented with Julia as part of the  PolynomialGTM.jl package!","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"tip: Credits\nSpecial thanks to Michael Livecchi, a good (and patient) friend who read all of these equations out over the phone to make sure they were typed correctly!","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"beginaligned\nf_1(xu) approx  1233times10^-8x_1^4x_3^2 + 4853times10^-9x_2^3u_2^3 \n+ 3705times10^-5x_1^3x_2 x_3 \n- 2184times10^-6x_1^3x_3^2 \n+ 2203times10^-2x_1^2x_2^3 - 2836times10^-6x_2^3u_2^2 \n + 3885times10^-7x_2^2u_2^3 - 1069times10^-6x_1^3x_3 \n - 4517times10^-2x_1^2x_2^2\n- 2140times10^-3x_1^2x_2u_1 \n- 3282times10^-3x_1^2x_2 x_3 - 8901times10^-4x_1^2u_1^2 \n + 9677times10^-5x_1^2x_3^2 - 2037times10^-4x_2^3u_2 \n- 2270times10^-4x_2^2u_2^2\n- 2912times10^-8x_2u_2^3 \n+ 1591times10^-3x_1^2x_2 - 4077times10^-4x_1^2u_1 \n + 9475times10^-5x_1^2x_3 - 1637x_2^3 \n- 1631times10^-2x_2^2u_2 + 4903x_2^2x_4 \n -4903x_2x_4^2 + 1702times10^-5x_2u_2^2 \n- 7771times10^-7u_2^3 + 1634x_4^3  \n- 4319times10^-4x_1^2 - 2142times10^-1x_2^2 \n+ 1222times10^-3x_2u_2\n+ 4541times10^-4u_2^2 \n+ 9823x_2 + 3261times10^-2u_2 \n- 9807x_4 + 4282times10^-1\nendaligned","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"beginaligned\nf_2(xu) approx  -3709times10^-11x_1^5x_3^2 + 6869times10^-11x_1x_2^3u_2^3 \n+ 7957times10^-10x_1^4x_2 x_3 \n+ 9860times10^-9x_1^4x_3^2 \n+ 1694times10^-5x_1^3x_2^3 - 4015times10^-8x_1x_2^3u_2^2 \n - 7722times10^-12x_1x_2^2u_2^3 - 6086times10^-9x_2^3u_2^3 \n- 2013times10^-8x_1^4x_3\n- 5180times10^-5x_1^3x_2^2 \n- 2720times10^-6x_1^3x_2u_1 \n- 1410times10^-7x_1^3x_2 x_3 \n + 7352times10^-7x_1^3u_1^2 - 8736times10^-7x_1^3x_3^2 \n- 1501times10^-3x_1^2x_2^3 \n- 2883times10^-6x_1x_2^3u_2 \n+ 4513times10^-9x_1x_2^2u_2^2 - 4121times10^-10x_1x_2u_2^3 \n + 3557times10^-6x_2^3u_2^2 + 6841times10^-10x_2^2u_2^3 \n+ 4151times10^-5x_1^3x_2 + 3648times10^-6x_1^3u_1 \n+ 3566times10^-6x_1^3x_3 + 6246times10^-6x_1^2x_2 x_3 \n + 4589times10^-3x_1^2x_2^2 + 2410times10^-74x_1^2x_2u_1 \n- 6514times10^-5x_1^2u_1^2 \n+ 2580times10^-5x_1^2x_3^2 \n- 3787times10^-5x_1x_2^3 + 3241times10^-7x_1x_2^2u_2 \n + 2409times10^-7x_1x_2u_2^2 + 1544times10^-11x_1u_2^3 \n+ 2554times10^-4x_2^3u_2 \n- 3998times10^-7x_2^2u_2^2 \n+ 3651times10^-8x_2u_2^3 + 4716times10^-7x_1^3 \n - 3677times10^-3x_1^2x_2 - 3231times10^-4x_1^2u_1 \n- 1579times10^-4x_1^2x_3 + 2605times10^-3x_1x_2^2 \n+ 1730times10^-5x_1x_2u_2 - 5201times10^-3x_1x_2x_4 \n- 9026times10^-9x_1u_2^2 + 2601times10^-3x_1x_4^2 \n+ 3355times10^-3x_2^3 - 2872times10^-5x_2^2u_2 \n- 2134times10^-5x_2u_2^2 - 1368times10^-9u_2^3 \n- 4178times10^-5x_1^2 + 2272times10^-4x_1x_2 \n- 6483times10^-7x_1u_2 - 2308times10^-1x_2^2 \n- 1532times10^-3x_2u_2 + 4608times10^-1x_2x_4 \n- 2304times10^-1x_4^2 + 7997times10^-7u_2^2 \n- 5210times10^-3x_1  - 2013times10^-2x_2 \n+ 5744times10^-5u_2 + x_3 + 4616times10^-1 \nendaligned","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"beginaligned\nf_3(xu) approx  - 6573times10^-9x_1^5x_3^3 + 1747times10^-6x_1^4x_3^3 \n- 1548times10^-4x_1^3x_3^3 - 3569times10^-3x_1^2x_2^3 \n+ 4571times10^-3x_1^2x_3^3 + 4953times10^-5x_1^3x_3 \n + 9596times10^-3x_1^2x_2^2 + 2049times10^-2x_1^2x_2u_1 \n- 2431times10^-2x_1^2x_2 - 3063times10^-2x_1^2u_1 \n- 4388times10^-3x_1^2x_3 - 2594times10^-7u_2^3 \n + 2461times10^-3x_1^2 + 1516times10^-4u_2^2 \n+ 1089times10^-2u_2 + 1430times10^-1\nendaligned","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"f_4(xu) approx x_3 ","category":"page"},{"location":"Chapter 3: Flight Dynamics/#Example","page":"Chapter 3: Flight Dynamics","title":"Example","text":"","category":"section"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"We can use DifferentialEquations and PolynomialGTM to simulate this system! Note that PolynomialGTM has placed all states and inputs at a trim condition as default values, so empty state and parameter initial conditions can be provided to ODEProblem. ","category":"page"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"using Plots\nusing PolynomialGTM\nusing DifferentialEquations\n\nproblem   = ODEProblem(GTM, [], (0.0, 100.0), [])\nsolutions = solve(problem; reltol = 1e-12, abstol = 1e-12)\n\nplot(solutions; linewidth = 2, dpi = 130, title = \"GTM Simulation\")","category":"page"},{"location":"Chapter 3: Flight Dynamics/#What's-Next?","page":"Chapter 3: Flight Dynamics","title":"What's Next?","text":"","category":"section"},{"location":"Chapter 3: Flight Dynamics/","page":"Chapter 3: Flight Dynamics","title":"Chapter 3: Flight Dynamics","text":"Take one more look at the polynomial models (the f_1 through f_4 equations) –  note how these equations are highly nonlinear. This f notation is a standard  way to describe nonlinear dynamics. There is also a standard way to describe  linear dynamics: state-space models. Linear dynamics are extremely valuable, because  (to paraphrase a famous quote)  we know how to solve them! Next, we'll take a look at general linear dynamics.","category":"page"},{"location":"#Control-Theory-Fundamentals","page":"Welcome!","title":"Control Theory Fundamentals","text":"","category":"section"},{"location":"","page":"Welcome!","title":"Welcome!","text":"Fundamental control theory concepts, and applications with a (rough) approximation of an aircraft model!","category":"page"},{"location":"","page":"Welcome!","title":"Welcome!","text":"import Pkg\nusing Markdown\nimport ControlTheoryNotes\nv = Pkg.TOML.parsefile(joinpath(dirname(string(first(methods(ControlTheoryNotes.eval)).file)), \"..\", \"Project.toml\"))[\"version\"]\nMarkdown.Admonition(\"warning\", \"In-Development! Version $v\", [\n    md\"These notes are under active development! They're being posted as they're written -- it's more fun that way.\n    You'll pretty easily find typos, blank pages, and mistakes. It's all part of the process!\n    If you have any questions about these notes, don't hesitate to [email](mailto:jdcarpinelli@gmail.com)\n    the author!\",\n    md\"I'd like all of the topics outlined below to have complete drafts posted here by the end of 2021. No promises though! Note the version numbers on [GitHub](https://github.com/cadojo/ControlTheoryNotes.jl).\"])","category":"page"},{"location":"#About-these-Notes","page":"Welcome!","title":"About these Notes","text":"","category":"section"},{"location":"","page":"Welcome!","title":"Welcome!","text":"Welcome to publicly available notes, with working and run-able examples, which  provide an overview to control theory. The intended audience are engineering students  (undergraduate, early graduate) or new professionals who might want a refresher  for fundamental control theory concepts. ","category":"page"},{"location":"","page":"Welcome!","title":"Welcome!","text":"We'll walk through simple definitions, motivate controls as a topic,  outline linear systems theory and why it is important, and  discuss linear and nonlinear controller design and analysis.  Throughout these notes, one system will be used as an example: a polynomial  model for a sub-scale radio-controlled aircraft, developed by NASA. ","category":"page"},{"location":"#Ways-to-Read","page":"Welcome!","title":"Ways to Read","text":"","category":"section"},{"location":"","page":"Welcome!","title":"Welcome!","text":"These notes are available as a website, and (soon) via PDF.  If you have any questions, suggestions, or corrections, always feel free to email the author, Joe Carpinelli.","category":"page"},{"location":"","page":"Welcome!","title":"Welcome!","text":"You can also host these notes locally! Simply execute the following commands in a Julia REPL.","category":"page"},{"location":"","page":"Welcome!","title":"Welcome!","text":"julia> ]add https://github.com/cadojo/ControlTheoryNotes.jl\njulia> import ControlTheoryNotes\njulia> ControlTheoryNotes.serve()","category":"page"},{"location":"#Topics-to-Cover","page":"Welcome!","title":"Topics to Cover","text":"","category":"section"},{"location":"","page":"Welcome!","title":"Welcome!","text":"Dynamics: definitions, nonlinear dynamics, and linear dynamics\nSystems Theory: linear systems theory, introductory nonlinear systems theory\nControls: control design for linear and nonlinear systems\nAnalysis: frequency analysis & other linear analysis techniques, nonlinear analysis","category":"page"},{"location":"#What's-Next?","page":"Welcome!","title":"What's Next?","text":"","category":"section"},{"location":"","page":"Welcome!","title":"Welcome!","text":"Move on to Chapter 1 for some motivation behind these notes, and an quick definitions!","category":"page"},{"location":"Chapter 6: Linearization/#Linearization","page":"Chapter 6: Linearization","title":"Linearization","text":"","category":"section"},{"location":"Chapter 6: Linearization/","page":"Chapter 6: Linearization","title":"Chapter 6: Linearization","text":"Approximating our nonlinear models.","category":"page"},{"location":"Chapter 6: Linearization/","page":"Chapter 6: Linearization","title":"Chapter 6: Linearization","text":"<mark>TODO!</mark>","category":"page"}]
}
